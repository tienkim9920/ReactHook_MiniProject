[{"E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Redux\\reducer\\ReducerCartTemp.jsx":"1","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Redux\\action\\ActionCartTemp.jsx":"2","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\Component\\MainCart.jsx":"3","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\ListCart.jsx":"4","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\Checkout.jsx":"5","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Auth\\SignIn.jsx":"6","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\Component\\Order.jsx":"7","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\InfoOrder.jsx":"8","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\ListOrder.jsx":"9"},{"size":3321,"mtime":1608046372467,"results":"10","hashOfConfig":"11"},{"size":508,"mtime":1608047426400,"results":"12","hashOfConfig":"11"},{"size":6959,"mtime":1608046458538,"results":"13","hashOfConfig":"11"},{"size":4851,"mtime":1607496793071,"results":"14","hashOfConfig":"11"},{"size":1521,"mtime":1607959923431,"results":"15","hashOfConfig":"11"},{"size":5132,"mtime":1608049854693,"results":"16","hashOfConfig":"11"},{"size":475,"mtime":1608054104652,"results":"17","hashOfConfig":"11"},{"size":1184,"mtime":1608054852618,"results":"18","hashOfConfig":"11"},{"size":1270,"mtime":1608056694353,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cj819s",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Redux\\reducer\\ReducerCartTemp.jsx",[],"E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Redux\\action\\ActionCartTemp.jsx",[],"E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\Component\\MainCart.jsx",["42","43","44"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useParams } from 'react-router-dom';\r\nimport ListCart from '../ListCart/ListCart';\r\nimport './MainCart.css'\r\nimport CartsAPI from '../../../Api/CartsAPI';\r\nimport queryString from 'query-string';\r\nimport alertify from 'alertifyjs'\r\nimport Checkout from '../ListCart/Checkout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteCartTemp, updateCartTemp } from '../../../Redux/action/ActionCartTemp';\r\n\r\nMainCart.propTypes = {\r\n\r\n};\r\n\r\nfunction MainCart(props) {\r\n\r\n    //Get listCart từ redux khi user chưa đăng nhập\r\n    let listCart = useSelector(state => state.CartTemp.listCart)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const id = useParams()\r\n\r\n    const idUser = id.id\r\n\r\n    const [cart, setCard] = useState([])\r\n\r\n    //State này dùng để load dữ liệu lại khi người dùng thay đổi số lượng\r\n    const [load, setLoad] = useState({\r\n\r\n        //State Update\r\n        idUser: '',\r\n        idProduct: '',\r\n        count: '',\r\n\r\n        // StateDelete\r\n        idUserDelete: '',\r\n        idProductDelete: '',\r\n\r\n    })\r\n\r\n    const [loadRedux, setLoadRedux] = useState({\r\n        idProduct: '',\r\n        count: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n\r\n            //Lần đầu sẽ không thực hiện delete được vì deleteCart.idProductDelete = ''\r\n            if (load.idProductDelete !== ''){\r\n\r\n                const params = {\r\n                    idProduct: load.idProductDelete\r\n                }\r\n\r\n                const query = queryString.stringify(params)\r\n\r\n                const newQuery = load.idUserDelete + \"?\" + query\r\n\r\n                console.log(newQuery)\r\n\r\n                const response = await CartsAPI.deleteCart(newQuery)\r\n                console.log(response)\r\n\r\n                alertify.set('notifier','position', 'bottom-left');\r\n                alertify.error('Bạn Đã Xóa Hàng Thành Công!');\r\n\r\n                setLoad({\r\n                    //State Update\r\n                    idUser: '',\r\n                    idProduct: '',\r\n                    count: '',\r\n\r\n                    //State Delete\r\n                    idUserDelete: '',\r\n                    idProductDelete: '',\r\n                })\r\n\r\n            }\r\n\r\n            //Lần đầu sẽ không thực hiện update được vì load = ''\r\n            if (load.idUser !== '') {\r\n\r\n                //Nó sẽ lấy idUser và idPro và count cần update để gửi lên server\r\n                const params = {\r\n                    idProduct: load.idProduct,\r\n                    count: load.count\r\n                }\r\n\r\n                const query = queryString.stringify(params)\r\n\r\n                const newQuery = load.idUser + \"?\" + query\r\n\r\n                console.log(newQuery)\r\n\r\n                const response = await CartsAPI.patchUpdateCount(newQuery)\r\n                console.log(response)\r\n            }\r\n\r\n\r\n            if (sessionStorage.getItem('idUser')){\r\n                const response = await CartsAPI.getCarttAll(idUser)\r\n\r\n                console.log(response)\r\n                setCard(response)\r\n            }\r\n\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [load])\r\n\r\n\r\n    //Hàm này dùng để Load dữ liệu ở Redux\r\n    useEffect(() => {\r\n\r\n        const fetchDataRedux = () => {\r\n\r\n            if (!sessionStorage.getItem('idUser')){\r\n                setCard(listCart)\r\n            }\r\n\r\n        }\r\n\r\n        fetchDataRedux()\r\n\r\n    }, [loadRedux])\r\n\r\n\r\n    //Hàm này dùng để truyền xuống cho component con xử và trả ngược dữ liệu lại component cha \r\n    const onUpdateCount = (getUser, getProduct, getCount) => {\r\n        console.log(\"Count: \" + getCount + \", idUser: \" + getUser + \", idProduct: \" + getProduct)\r\n\r\n        if (sessionStorage.getItem('idUser')){\r\n            //Sau khi nhận được dữ liệu ở component con truyền lên thì sẽ setLoad\r\n            //Để thay đổi state load và load lại hàm useEffect\r\n            setLoad({\r\n                //State Update\r\n                idUser: getUser,\r\n                idProduct: getProduct,\r\n                count: getCount,\r\n\r\n                //State Delete\r\n                idUserDelete: '',\r\n                idProductDelete: '',\r\n            })\r\n        }else{\r\n\r\n            //Nếu không có phiên làm việc của Session User thì mình sẽ xử lý với Redux\r\n            const data = {\r\n                idProduct: getProduct,\r\n                idUser: getUser,\r\n                count: getCount\r\n            }\r\n\r\n            //Đưa dữ liệu vào Redux\r\n            const action = updateCartTemp(data)\r\n            dispatch(action)\r\n\r\n            //set state loadRedux để nó load lại hàm useEffect để tiếp tục lấy dữ liệu từ redux\r\n            setLoadRedux({\r\n                idProduct: getProduct,\r\n                count: getCount\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    //Hàm này dùng để truyền xuống cho component con xử và trả ngược dữ liệu lại component cha \r\n    const onDeleteCart = (getUser, getProduct) => {\r\n        console.log( \"idUser: \" + getUser + \", idProduct: \" + getProduct)\r\n\r\n        if (sessionStorage.getItem('idUser')){\r\n            //Sau khi nhận được dữ liệu ở component con truyền lên thì sẽ setLoad\r\n            //Để thay đổi state deleteCart và load lại hàm useEffect\r\n            setLoad({\r\n                //State Update\r\n                idUser: '',\r\n                idProduct: '',\r\n                count: '',\r\n\r\n                //State Delete\r\n                idUserDelete: getUser,\r\n                idProductDelete: getProduct,\r\n            })\r\n        }else{\r\n\r\n            //Nếu không có phiên làm việc của Session User thì mình sẽ xử lý với Redux\r\n            const data = {\r\n                idProduct: getProduct,\r\n                idUser: getUser,\r\n            }\r\n\r\n            //Đưa dữ liệu vào Redux\r\n            const action = deleteCartTemp(data)\r\n            dispatch(action)\r\n\r\n            alertify.set('notifier','position', 'bottom-left');\r\n            alertify.error('Bạn Đã Xóa Hàng Thành Công!');\r\n\r\n            //set state loadRedux để nó load lại hàm useEffect để tiếp tục lấy dữ liệu từ redux\r\n            setLoadRedux({\r\n                idProduct: getProduct,\r\n                count: ''\r\n            })\r\n            \r\n        }\r\n\r\n    }\r\n\r\n\r\n    // ----------------------------------------Xử Lý Với Redux Khi User Chưa Đăng Nhập-------------------------------//\r\n\r\n\r\n    return (\r\n        <div className=\"wapper_cart\">\r\n            <ListCart ListCart={cart} onUpdateCount={onUpdateCount} onDeleteCart={onDeleteCart}/>\r\n\r\n            <Checkout ListCart={cart}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainCart;","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\ListCart.jsx",["45","46","47","48","49","50","51"],"E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\Checkout.jsx",["52"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect } from 'react-router-dom';\r\nimport alertify from 'alertifyjs';\r\nimport { useSelector } from 'react-redux';\r\n\r\nCheckout.propTypes = {\r\n    ListCart: PropTypes.array,\r\n};\r\n\r\nCheckout.defaultProps = {\r\n    ListCart: []\r\n}\r\n\r\nfunction Checkout(props) {\r\n\r\n    const { ListCart } = props\r\n\r\n    const [redirect, setRedirect] = useState(false)\r\n\r\n    const idUser = useSelector(state => state.Session.idUser)\r\n\r\n    let sum = 0;\r\n\r\n    const total = ListCart.map(value => {\r\n        return sum += parseInt(value.price) * parseInt(value.count)\r\n    })\r\n\r\n    console.log(sum)\r\n\r\n    const handlerCheckout = () => {\r\n        console.log(\"True\")\r\n\r\n        if (!sessionStorage.getItem('idUser')){\r\n            alertify.set('notifier','position', 'bottom-left');\r\n            alertify.error('Vui Lòng Kiểm Tra Đăng Nhập.')\r\n            return\r\n        }else{\r\n            setRedirect(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"d-flex justify-content-end\">\r\n                <h3 className=\"h3_total\">Total: {sum}$</h3>\r\n            </div>\r\n            <div className=\"btn_checkout d-flex justify-content-end\">\r\n                {\r\n                    redirect && <Redirect to={`/cart/${idUser}/order`} />\r\n                }\r\n                <button onClick={handlerCheckout}>Checkout</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Checkout;","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Auth\\SignIn.jsx",["53","54"],"E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\Component\\Order.jsx",["55"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InfoOrder from '../ListCart/InfoOrder';\r\nimport ListOrder from '../ListCart/ListOrder';\r\n\r\nOrder.propTypes = {\r\n\r\n};\r\n\r\nfunction Order(props) {\r\n    return (\r\n        <div className=\"container-fluid mx-auto\">\r\n            <div className=\"row justify-content-md-center\">\r\n                <InfoOrder />\r\n                <ListOrder />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Order;","E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\InfoOrder.jsx",["56"],"E:\\ReactJS\\ReactHook_MiniProject\\mini_project\\src\\Router\\Cart\\ListCart\\ListOrder.jsx",["57"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nListOrder.propTypes = {\r\n\r\n};\r\n\r\nfunction ListOrder(props) {\r\n    return (\r\n        <div className=\"col-6 .col-md-6 .col-sm-6\">\r\n            <div className=\"padding_order\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"Fullname\">Full Name:</label>\r\n                    <input type=\"text\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"Email\">Email Order:</label>\r\n                    <input type=\"text\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"Address\">Address:</label>\r\n                    <input type=\"text\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"Phone\">Phone Number:</label>\r\n                    <input type=\"text\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"btn_checkout d-flex justify-content-end\">\r\n                    <button>Order</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListOrder;",{"ruleId":"58","severity":1,"message":"59","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":116,"column":8,"nodeType":"64","endLine":116,"endColumn":14,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":132,"column":8,"nodeType":"64","endLine":132,"endColumn":19,"suggestions":"67"},{"ruleId":"58","severity":1,"message":"68","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":26},{"ruleId":"58","severity":1,"message":"69","line":3,"column":8,"nodeType":"60","messageId":"61","endLine":3,"endColumn":16},{"ruleId":"58","severity":1,"message":"70","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":19},{"ruleId":"71","severity":1,"message":"72","line":93,"column":49,"nodeType":"73","endLine":93,"endColumn":52},{"ruleId":"74","severity":1,"message":"75","line":93,"column":52,"nodeType":"73","endLine":93,"endColumn":99},{"ruleId":"71","severity":1,"message":"72","line":96,"column":49,"nodeType":"73","endLine":96,"endColumn":52},{"ruleId":"71","severity":1,"message":"72","line":116,"column":49,"nodeType":"73","endLine":116,"endColumn":140},{"ruleId":"58","severity":1,"message":"76","line":25,"column":11,"nodeType":"60","messageId":"61","endLine":25,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"62","severity":1,"message":"66","line":126,"column":8,"nodeType":"64","endLine":126,"endColumn":19,"suggestions":"77"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'idUser'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has a missing dependency: 'listCart'. Either include it or remove the dependency array.",["79"],"'useEffect' is defined but never used.","'CartsAPI' is defined but never used.","'queryString' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'total' is assigned a value but never used.",["80"],{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [idUser, load]",{"range":"87","text":"88"},"Update the dependencies array to be: [listCart, loadRedux]",{"range":"89","text":"90"},"Update the dependencies array to be: [checkPush, listCart]",{"range":"91","text":"92"},[3195,3201],"[idUser, load]",[3472,3483],"[listCart, loadRedux]",[3396,3407],"[checkPush, listCart]"]